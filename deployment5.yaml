#I hate this

# 1. Reglas de firewall:
#     - firewall-django
#     - firewall-db

# 2. Instancias MVs:
#    - ofipensiones-db-lectura 10.128.0.60
#    - ofipensiones-db-escritura 10.128.0.61
#    - instance-pago-master 10.128.0.70
#    - instance-pago-novato 10.128.0.71
#    - kong-instance 10.128.0.55
#    - rabbitmq-instance 10.128.0.90


resources:
# Firewall Rules
- name: firewall-rabbitmq
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/<id-proyecto>/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceRanges:
    - 0.0.0.0/0
    targetTags:
    - rabbitmq
    allowed:
    - IPProtocol: TCP
      ports:
      - 5672 
      - 15672

- name: firewall-command-service
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/<id-proyecto>/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceRanges:
    - 0.0.0.0/0
    targetTags:
    - command-service
    allowed:
    - IPProtocol: TCP
      ports:
      - 8081

- name: firewall-query-service
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/<id-proyecto>/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceRanges:
    - 0.0.0.0/0
    targetTags:
    - query-service
    allowed:
    - IPProtocol: TCP
      ports:
      - 8082 

# RabbitMQ Instance
- type: compute.v1.instance
  name: rabbitmq-instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/<id-proyecto>/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-11
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/<id-proyecto>/global/networks/default
      networkIP: 10.128.0.90
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items:
      - rabbitmq
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          # Add Docker's official GPG key:
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \ "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \$(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo docker run -d --hostname mensajero --name mensajero -e RABBITMQ_DEFAULT_USER=msger -e RABBITMQ_DEFAULT_PASS=isis2503 -p 5672:5672 rabbitmq:3

- type: compute.v1.instance
  name: instance-pago-master
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/<id-proyecto>/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20241016
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/<id-proyecto>/global/networks/default
      networkIP: 10.128.0.70
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items: 
      - rest-django
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          sudo apt-get update
          sudo git clone https://github.com/isis2503-SQL-Injection/OfipensionesApp.git
          cd OfipensionesApp
          git checkout cqrs-ayuda
          cd patron
          cd master
          sudo apt install python3-pip -y
          sudo pip3 install -r requirements.txt
          sudo pip3 install django-cqrs
          sudo python3 manage.py makemigrations
          sudo python3 manage.py migrate
          sudo nohup python3 manage.py runserver 0.0.0.0:8080 &
#novato
- type: compute.v1.instance
  name: instance-pago-novato
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/<id-proyecto>/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20241016
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/<id-proyecto>/global/networks/default
      networkIP: 10.128.0.71
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items: 
      - rest-django
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          sudo apt-get update
          sudo git clone https://github.com/isis2503-SQL-Injection/OfipensionesApp.git
          cd OfipensionesApp
          git checkout cqrs-ayuda
          cd patron
          cd novato
          sudo apt install python3-pip -y
          sudo pip3 install -r requirements.txt
          sudo pip3 install django-cqrs
          sudo python3 manage.py makemigrations
          sudo python3 manage.py migrate
          sudo pip3 install pika
          sudo nohup python3 manage.py runserver 0.0.0.0:8080 &


# Kong instance
- type: compute.v1.instance
  name: kong-instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/<id-proyecto>/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20241016
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/<id-proyecto>/global/networks/default
      networkIP: 10.128.0.55
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items: 
      - ofipension-circuit-breaker
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get install ca-certificates curl gnupg lsb-release -y
          sudo mkdir -m 0755 -p /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
#sudo groupadd docker
#sudo usermod -aG docker $USER
#sudo newgrp docker 

#(cerrar y abrir terminal)

#sudo nano kong.yml (pegar el contenido del archivo kong.yml)       
#sudo docker network create kong-net
#sudo docker run -d --name kong --network=kong-net -v "$(pwd):/kong/declarative/" -e "KONG_DATABASE=off" -e "KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml" -e "KONG_PROXY_ACCESS_LOG=/dev/stdout" -e "KONG_ADMIN_ACCESS_LOG=/dev/stdout" -e "KONG_PROXY_ERROR_LOG=/dev/stderr" -e "KONG_ADMIN_ERROR_LOG=/dev/stderr" -e "KONG_ADMIN_LISTEN=0.0.0.0:8001" -e "KONG_ADMIN_GUI_URL=http://localhost:8002" -p 8000:8000 -p 8001:8001 -p 8002:8002 kong/kong-gateway:2.7.2.0-alpine
#sudo docker ps